{"ast":null,"code":"var _jsxFileName = \"G:\\\\Developer\\\\ReactJs\\\\abc\\\\src\\\\components\\\\InputField\\\\index.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField } from \"@material-ui/core\";\nimport { Controller } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nInputField.propTypes = {\n  form: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  disabled: PropTypes.bool\n};\n\nfunction InputField(props) {\n  const {\n    form,\n    name,\n    label,\n    disabled\n  } = props;\n  const {\n    formState: {\n      errors\n    }\n  } = form;\n  const hasError = errors[name];\n  console.log(errors[name]);\n  return /*#__PURE__*/_jsxDEV(Controller, {\n    name: name,\n    control: form.control,\n    render: ({\n      field: {\n        onChange,\n        onBlur,\n        value,\n        name,\n        ref\n      },\n      fieldState: {\n        invalid,\n        isTouched,\n        isDirty,\n        error\n      },\n      formState\n    }) => {\n      var _errors$name;\n\n      return /*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"normal\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: label,\n        disabled: disabled,\n        error: !!hasError,\n        helperText: (_errors$name = errors[name]) === null || _errors$name === void 0 ? void 0 : _errors$name.message,\n        value: value,\n        onChange: onChange,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_c = InputField;\nexport default InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["G:/Developer/ReactJs/abc/src/components/InputField/index.js"],"names":["React","PropTypes","TextField","Controller","InputField","propTypes","form","object","isRequired","name","string","label","disabled","bool","props","formState","errors","hasError","console","log","control","field","onChange","onBlur","value","ref","fieldState","invalid","isTouched","isDirty","error","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAEAC,UAAU,CAACC,SAAX,GAAuB;AACrBC,EAAAA,IAAI,EAAEL,SAAS,CAACM,MAAV,CAAiBC,UADF;AAErBC,EAAAA,IAAI,EAAER,SAAS,CAACS,MAAV,CAAiBF,UAFF;AAGrBG,EAAAA,KAAK,EAAEV,SAAS,CAACS,MAHI;AAIrBE,EAAAA,QAAQ,EAAEX,SAAS,CAACY;AAJC,CAAvB;;AAOA,SAAST,UAAT,CAAoBU,KAApB,EAA2B;AACzB,QAAM;AAAER,IAAAA,IAAF;AAAQG,IAAAA,IAAR;AAAcE,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,MAAkCE,KAAxC;AACA,QAAM;AACJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AADP,MAEFV,IAFJ;AAGA,QAAMW,QAAQ,GAAGD,MAAM,CAACP,IAAD,CAAvB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACP,IAAD,CAAlB;AAEA,sBACE,QAAC,UAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,OAAO,EAAEH,IAAI,CAACc,OAFhB;AAGE,IAAA,MAAM,EAAE,CAAC;AACPC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA,KAApB;AAA2Bf,QAAAA,IAA3B;AAAiCgB,QAAAA;AAAjC,OADA;AAEPC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA,OAAtB;AAA+BC,QAAAA;AAA/B,OAFL;AAGPf,MAAAA;AAHO,KAAD;AAAA;;AAAA,0BAKN,QAAC,SAAD;AACE,QAAA,MAAM,EAAC,QADT;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,KAAK,EAAEJ,KAJT;AAKE,QAAA,QAAQ,EAAEC,QALZ;AAME,QAAA,KAAK,EAAE,CAAC,CAACK,QANX;AAOE,QAAA,UAAU,kBAAED,MAAM,CAACP,IAAD,CAAR,iDAAE,aAAcsB,OAP5B;AAQE,QAAA,KAAK,EAAEP,KART;AASE,QAAA,QAAQ,EAAEF,QATZ;AAUE,QAAA,IAAI,EAAEb;AAVR;AAAA;AAAA;AAAA;AAAA,cALM;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;KAhCQL,U;AAkCT,eAAeA,UAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField } from \"@material-ui/core\";\nimport { Controller } from \"react-hook-form\";\n\nInputField.propTypes = {\n  form: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  disabled: PropTypes.bool,\n};\n\nfunction InputField(props) {\n  const { form, name, label, disabled } = props;\n  const {\n    formState: { errors },\n  } = form;\n  const hasError = errors[name];\n  console.log(errors[name]);\n\n  return (\n    <Controller\n      name={name}\n      control={form.control}\n      render={({\n        field: { onChange, onBlur, value, name, ref },\n        fieldState: { invalid, isTouched, isDirty, error },\n        formState,\n      }) => (\n        <TextField\n          margin=\"normal\"\n          variant=\"outlined\"\n          fullWidth\n          label={label}\n          disabled={disabled}\n          error={!!hasError}\n          helperText={errors[name]?.message}\n          value={value}\n          onChange={onChange}\n          name={name}\n        />\n      )}\n    />\n  );\n}\n\nexport default InputField;\n"]},"metadata":{},"sourceType":"module"}