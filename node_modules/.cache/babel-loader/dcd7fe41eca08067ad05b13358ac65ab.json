{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport userApi from \"../../api/userApi\";\nimport StorageKeys from \"../../constants/storageKey\"; // import { toastError } from \"../../components/Notification\";\n\nexport const register = createAsyncThunk(\"users/register\", async payload => {\n  const data = await userApi.register(payload);\n  localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n  return data.user;\n});\nexport const login = createAsyncThunk(\"users/login\", async payload => {\n  const data = await userApi.login(payload);\n  localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n  return data.user;\n});\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    current: JSON.parse(localStorage.getItem(StorageKeys.USER)) || {},\n    settings: {}\n  },\n  reducers: {\n    logout(state, action) {\n      localStorage.removeItem(StorageKeys.TOKEN);\n      localStorage.removeItem(StorageKeys.USER);\n      state.current = {};\n    }\n\n  },\n  extraReducers: {\n    [register.fulfilled]: (state, action) => {\n      state.current = action.payload;\n    },\n    [register.rejected]: (_, action) => {},\n    [login.fulfilled]: (state, action) => {\n      state.current = action.payload;\n    },\n    [login.rejected]: (_, action) => {}\n  }\n});\nconst {\n  actions,\n  reducer\n} = userSlice;\nexport const {\n  logout\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["G:/Developer/ReactJs/abc/src/feature/Auth/useSlice.js"],"names":["createAsyncThunk","createSlice","userApi","StorageKeys","register","payload","data","localStorage","setItem","TOKEN","jwt","USER","JSON","stringify","user","login","userSlice","name","initialState","current","parse","getItem","settings","reducers","logout","state","action","removeItem","extraReducers","fulfilled","rejected","_","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB,C,CACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGJ,gBAAgB,CAAC,gBAAD,EAAmB,MAAOK,OAAP,IAAmB;AAC5E,QAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACE,QAAR,CAAiBC,OAAjB,CAAnB;AAEAE,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACM,KAAjC,EAAwCH,IAAI,CAACI,GAA7C;AACAH,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACQ,IAAjC,EAAuCC,IAAI,CAACC,SAAL,CAAeP,IAAI,CAACQ,IAApB,CAAvC;AAEA,SAAOR,IAAI,CAACQ,IAAZ;AACD,CAPuC,CAAjC;AASP,OAAO,MAAMC,KAAK,GAAGf,gBAAgB,CAAC,aAAD,EAAgB,MAAOK,OAAP,IAAmB;AACtE,QAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACa,KAAR,CAAcV,OAAd,CAAnB;AAEAE,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACM,KAAjC,EAAwCH,IAAI,CAACI,GAA7C;AACAH,EAAAA,YAAY,CAACC,OAAb,CAAqBL,WAAW,CAACQ,IAAjC,EAAuCC,IAAI,CAACC,SAAL,CAAeP,IAAI,CAACQ,IAApB,CAAvC;AAEA,SAAOR,IAAI,CAACQ,IAAZ;AACD,CAPoC,CAA9B;AASP,MAAME,SAAS,GAAGf,WAAW,CAAC;AAC5BgB,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAEP,IAAI,CAACQ,KAAL,CAAWb,YAAY,CAACc,OAAb,CAAqBlB,WAAW,CAACQ,IAAjC,CAAX,KAAsD,EADnD;AAEZW,IAAAA,QAAQ,EAAE;AAFE,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACpBnB,MAAAA,YAAY,CAACoB,UAAb,CAAwBxB,WAAW,CAACM,KAApC;AACAF,MAAAA,YAAY,CAACoB,UAAb,CAAwBxB,WAAW,CAACQ,IAApC;AACAc,MAAAA,KAAK,CAACN,OAAN,GAAgB,EAAhB;AACD;;AALO,GANkB;AAa5BS,EAAAA,aAAa,EAAE;AACb,KAACxB,QAAQ,CAACyB,SAAV,GAAsB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACN,OAAN,GAAgBO,MAAM,CAACrB,OAAvB;AACD,KAHY;AAIb,KAACD,QAAQ,CAAC0B,QAAV,GAAqB,CAACC,CAAD,EAAIL,MAAJ,KAAe,CAAE,CAJzB;AAKb,KAACX,KAAK,CAACc,SAAP,GAAmB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACN,OAAN,GAAgBO,MAAM,CAACrB,OAAvB;AACD,KAPY;AAQb,KAACU,KAAK,CAACe,QAAP,GAAkB,CAACC,CAAD,EAAIL,MAAJ,KAAe,CAAE;AARtB;AAba,CAAD,CAA7B;AAyBA,MAAM;AAAEM,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBjB,SAA7B;AACA,OAAO,MAAM;AAAEQ,EAAAA;AAAF,IAAaQ,OAAnB;AACP,eAAeC,OAAf","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport userApi from \"../../api/userApi\";\nimport StorageKeys from \"../../constants/storageKey\";\n// import { toastError } from \"../../components/Notification\";\n\nexport const register = createAsyncThunk(\"users/register\", async (payload) => {\n  const data = await userApi.register(payload);\n\n  localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n\n  return data.user;\n});\n\nexport const login = createAsyncThunk(\"users/login\", async (payload) => {\n  const data = await userApi.login(payload);\n\n  localStorage.setItem(StorageKeys.TOKEN, data.jwt);\n  localStorage.setItem(StorageKeys.USER, JSON.stringify(data.user));\n\n  return data.user;\n});\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    current: JSON.parse(localStorage.getItem(StorageKeys.USER)) || {},\n    settings: {},\n  },\n  reducers: {\n    logout(state, action) {\n      localStorage.removeItem(StorageKeys.TOKEN);\n      localStorage.removeItem(StorageKeys.USER);\n      state.current = {};\n    },\n  },\n  extraReducers: {\n    [register.fulfilled]: (state, action) => {\n      state.current = action.payload;\n    },\n    [register.rejected]: (_, action) => {},\n    [login.fulfilled]: (state, action) => {\n      state.current = action.payload;\n    },\n    [login.rejected]: (_, action) => {},\n  },\n});\n\nconst { actions, reducer } = userSlice;\nexport const { logout } = actions;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}