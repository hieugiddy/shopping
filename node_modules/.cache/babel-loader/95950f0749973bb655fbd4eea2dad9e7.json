{"ast":null,"code":"var _jsxFileName = \"D:\\\\Source\\\\ReactJs\\\\react-app\\\\src\\\\components\\\\PasswordField\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { FormHelperText } from \"@material-ui/core\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport { Controller } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPasswordField.propTypes = {\n  form: PropTypes.object.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  disabled: PropTypes.bool\n};\n\nfunction PasswordField(props) {\n  _s();\n\n  var _errors$name;\n\n  const {\n    form,\n    name,\n    label,\n    disabled\n  } = props;\n  const {\n    formState: {\n      errors\n    }\n  } = form;\n  const hasError = errors[name];\n  const [showPassword, setShowPassword] = useState(false);\n\n  const toggleShowPassword = () => {\n    setShowPassword(x => !x);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    error: hasError,\n    fullWidth: true,\n    margin: \"normal\",\n    variant: \"outlined\",\n    children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controller, {\n      name: name,\n      control: form.control,\n      render: ({\n        field: {\n          onChange,\n          onBlur,\n          value,\n          name,\n          ref\n        },\n        fieldState: {\n          invalid,\n          isTouched,\n          isDirty,\n          error\n        },\n        formState\n      }) => /*#__PURE__*/_jsxDEV(OutlinedInput, {\n        id: name,\n        type: showPassword ? \"text\" : \"password\",\n        label: label,\n        name: name,\n        onChange: onChange,\n        onBlur: onBlur,\n        value: value,\n        inputRef: ref,\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"toggle password visibility\",\n            onClick: toggleShowPassword,\n            edge: \"end\",\n            children: showPassword ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 35\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this),\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n      children: (_errors$name = errors[name]) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PasswordField, \"daguiRHWMFkqPgCh/ppD7CF5VuQ=\");\n\n_c = PasswordField;\nexport default PasswordField;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordField\");","map":{"version":3,"sources":["D:/Source/ReactJs/react-app/src/components/PasswordField/index.js"],"names":["FormHelperText","FormControl","IconButton","InputAdornment","InputLabel","OutlinedInput","Visibility","VisibilityOff","PropTypes","React","useState","Controller","PasswordField","propTypes","form","object","isRequired","name","string","label","disabled","bool","props","formState","errors","hasError","showPassword","setShowPassword","toggleShowPassword","x","control","field","onChange","onBlur","value","ref","fieldState","invalid","isTouched","isDirty","error","message"],"mappings":"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","sourcesContent":["import { FormHelperText } from \"@material-ui/core\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { Controller } from \"react-hook-form\";\r\n\r\nPasswordField.propTypes = {\r\n  form: PropTypes.object.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  label: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nfunction PasswordField(props) {\r\n  const { form, name, label, disabled } = props;\r\n  const {\r\n    formState: { errors },\r\n  } = form;\r\n  const hasError = errors[name];\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const toggleShowPassword = () => {\r\n    setShowPassword((x) => !x);\r\n  };\r\n\r\n  return (\r\n    <FormControl\r\n      error={hasError}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n    >\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Controller\r\n        name={name}\r\n        control={form.control}\r\n        render={({\r\n          field: { onChange, onBlur, value, name, ref },\r\n          fieldState: { invalid, isTouched, isDirty, error },\r\n          formState,\r\n        }) => (\r\n          <OutlinedInput\r\n            id={name}\r\n            type={showPassword ? \"text\" : \"password\"}\r\n            label={label}\r\n            name={name}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            value={value}\r\n            inputRef={ref}\r\n            endAdornment={\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={toggleShowPassword}\r\n                  edge=\"end\"\r\n                >\r\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n            disabled={disabled}\r\n          />\r\n        )}\r\n      />\r\n      <FormHelperText>{errors[name]?.message}</FormHelperText>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default PasswordField;\r\n"]},"metadata":{},"sourceType":"module"}